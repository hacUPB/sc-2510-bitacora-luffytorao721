# Implementación Completa: Lluvia de Partículas Interactiva

## Archivo `ofApp.h`

```cpp
#pragma once

#include "ofMain.h"

class Particle {
public:
    ofVec2f position;
    ofVec2f velocity;
    ofColor color;
    float lifespan;
    Particle* next;

    Particle(float x, float y);
};

class ParticleSystem {
private:
    Particle* activeHead;
    std::stack<Particle*> inactivePool;
    std::queue<ofColor> colorQueue;
    int activeCount;
    const int MAX_PARTICLES = 10000;

public:
    ParticleSystem();
    ~ParticleSystem();

    void update();
    void draw();
    void addParticle(float x, float y);
    void addExplosion(float x, float y, int count = 50);
    void enqueueColor(ofColor col);
    void clearAll();
    int getActiveCount() const;

private:
    Particle* getParticle();
    void recycleParticle(Particle* p);
    void addParticleWithColor(ofColor col);
};

class ofApp : public ofBaseApp {
public:
    void setup();
    void update();
    void draw();
    void mousePressed(int x, int y, int button);
    void keyPressed(int key);

private:
    ParticleSystem particleSystem;
    ofColor currentColor;
};
```

## Archivo `ofApp.cpp`

```cpp
#include "ofApp.h"

//--------------------------------------------------------------
// Particle Implementation
//--------------------------------------------------------------
Particle::Particle(float x, float y) : position(x, y), lifespan(255) {
    velocity.set(ofRandom(-0.5f, 0.5f), ofRandom(0.5f, 2.0f));
    color.setHsb(ofRandom(255), 200, 255);
    next = nullptr;
}

//--------------------------------------------------------------
// ParticleSystem Implementation
//--------------------------------------------------------------
ParticleSystem::ParticleSystem() : activeHead(nullptr), activeCount(0) {
    // Preallocate particles for pool
    for (int i = 0; i < 1000; ++i) {
        inactivePool.push(new Particle(0, 0));
    }
}

ParticleSystem::~ParticleSystem() {
    clearAll();
    
    // Cleanup pool
    while (!inactivePool.empty()) {
        delete inactivePool.top();
        inactivePool.pop();
    }
}

void ParticleSystem::update() {
    // Update active particles
    Particle** curr = &activeHead;
    while (*curr) {
        (*curr)->position += (*curr)->velocity;
        (*curr)->lifespan -= 2.0f;
        
        if ((*curr)->lifespan <= 0 || 
            (*curr)->position.y > ofGetHeight() || 
            (*curr)->position.x < 0 || 
            (*curr)->position.x > ofGetWidth()) {
            
            Particle* toRecycle = *curr;
            *curr = (*curr)->next;
            recycleParticle(toRecycle);
            activeCount--;
        } else {
            curr = &((*curr)->next);
        }
    }
    
    // Process color queue
    if (!colorQueue.empty() && ofGetFrameNum() % 10 == 0 && activeCount < MAX_PARTICLES) {
        addParticleWithColor(colorQueue.front());
        colorQueue.pop();
    }
}

void ParticleSystem::draw() {
    Particle* current = activeHead;
    while (current) {
        ofSetColor(current->color);
        ofDrawCircle(current->position, 3 + (current->lifespan / 100));
        current = current->next;
    }
}

void ParticleSystem::addParticle(float x, float y) {
    if (activeCount >= MAX_PARTICLES) return;
    
    Particle* p = getParticle();
    p->position.set(x, y);
    p->velocity.set(ofRandom(-0.5f, 0.5f), ofRandom(0.5f, 2.0f));
    p->lifespan = 255;
    
    // Add to active list
    p->next = activeHead;
    activeHead = p;
    activeCount++;
}

void ParticleSystem::addExplosion(float x, float y, int count) {
    for (int i = 0; i < count && activeCount < MAX_PARTICLES; ++i) {
        Particle* p = getParticle();
        p->position.set(x, y);
        p->velocity.set(ofRandom(-5.0f, 5.0f), ofRandom(-5.0f, 5.0f));
        p->lifespan = ofRandom(100, 255);
        
        // Add to active list
        p->next = activeHead;
        activeHead = p;
        activeCount++;
    }
}

void ParticleSystem::enqueueColor(ofColor col) {
    colorQueue.push(col);
}

void ParticleSystem::clearAll() {
    Particle* curr = activeHead;
    while (curr) {
        Particle* next = curr->next;
        recycleParticle(curr);
        curr = next;
    }
    activeHead = nullptr;
    activeCount = 0;
}

int ParticleSystem::getActiveCount() const {
    return activeCount;
}

Particle* ParticleSystem::getParticle() {
    if (inactivePool.empty()) {
        return new Particle(0, 0);
    }
    
    Particle* p = inactivePool.top();
    inactivePool.pop();
    return p;
}

void ParticleSystem::recycleParticle(Particle* p) {
    p->next = nullptr;
    inactivePool.push(p);
}

void ParticleSystem::addParticleWithColor(ofColor col) {
    Particle* p = getParticle();
    p->color = col;
    p->position.set(ofRandomWidth(), 0);
    p->velocity.set(ofRandom(-0.5f, 0.5f), ofRandom(0.5f, 2.0f));
    p->lifespan = 255;
    
    p->next = activeHead;
    activeHead = p;
    activeCount++;
}

//--------------------------------------------------------------
// ofApp Implementation
//--------------------------------------------------------------
void ofApp::setup() {
    ofSetBackgroundColor(0);
    ofSetFrameRate(60);
    currentColor.setHsb(ofRandom(255), 200, 255);
}

void ofApp::update() {
    // Add rain particles continuously
    if (ofGetFrameNum() % 2 == 0) {
        particleSystem.addParticle(ofRandomWidth(), -10);
    }
    
    particleSystem.update();
}

void ofApp::draw() {
    ofBackgroundGradient(ofColor(10, 20, 30), ofColor(0, 0, 0), OF_GRADIENT_CIRCULAR);
    particleSystem.draw();
    
    // Display stats
    ofSetColor(255);
    ofDrawBitmapString("Particulas activas: " + ofToString(particleSystem.getActiveCount()), 20, 20);
    ofDrawBitmapString("FPS: " + ofToString(ofGetFrameRate()), 20, 40);
    ofDrawBitmapString("Clic: Explosion | Teclas 1-9: Cambiar color | C: Limpiar", 20, ofGetHeight() - 20);
}

void ofApp::mousePressed(int x, int y, int button) {
    particleSystem.addExplosion(x, y);
}

void ofApp::keyPressed(int key) {
    if (key >= '1' && key <= '9') {
        float hue = ofMap(key - '1', 0, 8, 0, 255);
        currentColor.setHsb(hue, 200, 255);
        particleSystem.enqueueColor(currentColor);
    } else if (key == 'c' || key == 'C') {
        particleSystem.clearAll();
    }
}
```

## Características Clave

1. **Gestión de Memoria Avanzada**:
   - Object pooling con stack para reutilización de partículas
   - Limpieza automática en destructor
   - Límite máximo de partículas para prevenir sobrecarga

2. **Interacciones**:
   - Clic del mouse: crea explosiones de partículas
   - Teclas 1-9: cambian el color de las nuevas partículas
   - Tecla C: limpia todas las partículas

3. **Estructuras de Datos**:
   - Lista enlazada para partículas activas
   - Pila (stack) para el object pool
   - Cola (queue) para transiciones de color

4. **Optimizaciones**:
   - Pre-allocation de partículas
   - Actualización eficiente de la lista enlazada
   - Dibujado optimizado

